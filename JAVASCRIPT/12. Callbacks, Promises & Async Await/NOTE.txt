#What this chapeter is about?
>async await >> promise chains >> callback hell

#Sync in JS:-
(i). Synchronous:- Synchronous means the code runs in a particular
sequence of instructions given in the program. Each instruction wait 
for the previous instruction to complete its execution.

(ii). Asynchronous:- Due to synchronous programming, sometimes imp 
instructions get blocked due to some previous instructions, which 
causes a delay in the UI. Asynchronous code execution allows to 
execute next instructions immediately and doesn't block the flow.


#Callback Hell:- Nested callbacks stacked below one another forming
a pyramid. This is a problem in asynchronous programming.
(Pyramid of Doom)

>This style of programming becomes difficult to understand & manage.



#Promises:- Promise is for "eventual" completion of task.
It is an object in JS. It is a solution to callback hell.

>let promise = new Promise((resolve, reject) => {....})
>resolve & reject are callbacks provided by JS.

>A JavaScript Promise object can be:
 (i). Pending: the result is undefined
 (ii). Resolve: the result is a value(fulfulled)  //resolve(result)
 (iii). Rejected: the result is an error object  //reject(error)

>Promise has state(pending, fulfulled) & some result(result for resolve & error for reject).

> .then() & .catch()
   (i). promise.then((res) => {....})
   (ii). promise.catch((err) => {.....})



#Async-Await:- async function always returns a promise
  > async function myFunc() {.....}
  >await pauses the execution of its surrounding async function
  until the promise is settled.